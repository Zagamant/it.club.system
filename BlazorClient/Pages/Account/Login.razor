@page "/account/login"
@using BlazorClient.Services.AccountManagement
@using BlazorClient.Services.AlertManagement
@using System.BLL.Models.UserManagement
@inject IAccountService _accountService
@inject IAlertService _alertService
@inject NavigationManager _navigationManager

<Row Class="vh-100">
    <Column ColumnSize="ColumnSize.Is7.OnDesktop.Is7.OnTablet.Is4">
        <div class="login-bg-image"></div>
    </Column>
    <Column ColumnSize="ColumnSize.Is5.OnDesktop.Is5.OnTablet.Is8.OnMobile.Is12" Class="shadow">
        <div class="paper">
            <Form class="w-100">
                <Heading Size="HeadingSize.Is1">Sign In</Heading>
                <Validation Validator="@ValidateUsername">
                    <Field>
                        <FieldLabel Class="h2">Username</FieldLabel>
                        <FieldBody >
                            <TextEdit Placeholder="Enter username" @bind-Text="model.UserName" ChangeTextOnKeyPress="true"/>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidatePassword">
                    <Field>
                        <FieldLabel Class="h2">Password</FieldLabel>
                        <FieldBody >
                            <TextEdit Placeholder="Enter password" @bind-Text="model.Password" type="password"/>
                        </FieldBody>

                    </Field>
                </Validation>
                <Button Color="Color.Primary" PreventDefaultOnSubmit="true" Clicked="@OnValidSubmit" Loading="@loading">
                    Login
                </Button>
                <Button Class="register-button mt-0" Color="Color.Light" To="account/register">
                    Register
                </Button>
            </Form>
        </div>
    </Column>
</Row>


@code {
    private Models.Account.Login model = new();
    private UserLoginData _user = new();
    private bool loading;

    private async void OnValidSubmit()
    {
    // reset alerts on submit
        _alertService.Clear();

        loading = true;
        try
        {
            _user = await _accountService.Login(model);
            var returnUrl = _navigationManager.QueryString("returnUrl") ?? "/";
            _navigationManager.NavigateTo(returnUrl, true);
        }
        catch (Exception ex)
        {
            _alertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
            Console.WriteLine(ex.Message);
        }
        finally
        {
            loading = false;
        }
    }

    void ValidateUsername(ValidatorEventArgs e)
    {
        var username = Convert.ToString(e.Value);

        e.Status = !string.IsNullOrEmpty(username) ? ValidationStatus.Success : ValidationStatus.Error;
    }

    private void ValidatePassword(ValidatorEventArgs e)
    {
        var password = Convert.ToString(e.Value);

        e.Status = string.IsNullOrEmpty(password) ? ValidationStatus.Error :
            password.Length < 8 ? ValidationStatus.Error :
                password.Any(char.IsUpper) ? password.Any(char.IsLower) ? ValidationStatus.Success :
                    ValidationStatus.Error :
                    ValidationStatus.Error;
    }

}