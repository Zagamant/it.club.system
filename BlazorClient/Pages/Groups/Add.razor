@page "/groups/add"
@using Microsoft.AspNetCore.Authorization
@using BlazorClient.Services.GroupManagement
@using BlazorClient.Services.AlertManagement
@using System.BLL.Models.GroupManagement;

@attribute [Authorize]
@inject IAlertService _alertService
@inject IGroupService _groupService
@inject NavigationManager _navigationManager

    <div class="form">
            <h1>Add Group</h1>


            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />

                <div class="form-row">
                    <div class="form-group col">
                        <label>Название</label>
                        <InputText @bind-Value="model.Title" class="form-control" />
                        <ValidationMessage For="@(() => model.Title)" />
                    </div>
                    <div class="form-group col">
                        <label>Уроков в неделю</label>
                        <InputNumber @bind-Value="model.LessonsPerWeek" class="form-control" />
                        <ValidationMessage For="@(() => model.LessonsPerWeek)" />
                    </div>

                    <div class="form-group col">
                        <label>Ссылка на конференцию</label>
                        <InputText @bind-Value="model.OnlineConversationLink" class="form-control" />
                        <ValidationMessage For="@(() => model.OnlineConversationLink)" />
                    </div>

                    <div class="form-group col">
                        <label>Мессенджер</label>
                        <InputText @bind-Value="model.Messenger" class="form-control" />
                        <ValidationMessage For="@(() => model.Messenger)" />
                    </div>

                </div>
                <div class="form-row">
                    <div class="form-group col">
                        <label>Начало занятий</label>
                        <InputDate @bind-Value="model.StartDate" class="form-control" />
                        <ValidationMessage For="@(() => model.StartDate)" />
                    </div>
                    <div class="form-group col">
                        <label>Окончание занятий</label>
                        <InputDate @bind-Value="model.EndDate" class="form-control" />
                        <ValidationMessage For="@(() => model.EndDate)" />
                    </div>

                    <div class="form-group col">
                        <label>Количество учащихся</label>
                        <InputNumber @bind-Value="model.Capacity" class="form-control" />
                        <ValidationMessage For="@(() => model.Capacity)" />
                    </div>

                    <div class="form-group col">
                        <label>Статус</label>
                        @*<select @bind-value="model.status" class="form-control" />*@
                        <Select TValue="string">
                            @foreach (var item in _groupStatus)
                            {
                                <SelectItem Value="@item">@item</SelectItem>
                            }
                        </Select>
                        <ValidationMessage For="@(() => model.Status)" />
                    </div>


                </div>
                <div class="form-group">
                    <button disabled="@loading" class="btn btn-primary">
                        @if (loading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Save
                    </button>
                    <NavLink href="users" class="btn btn-link">Cancel</NavLink>
                </div>
            </EditForm>
    </div>



    @code {

        private static readonly string[] _groupStatus =
            {
            "Recruitment",
        "PendingStart",
        "InProgress",
        "Canceled"

        };

        private GroupModel model = new GroupModel();
        private bool loading;

        private async void OnValidSubmit()
        {
            loading = true;
            try
            {
                await _groupService.AddAsync(model);
                _alertService.Success("Group added successfully", keepAfterRouteChange: true);
                _navigationManager.NavigateTo("users");
            }
            catch (Exception ex)
            {
                _alertService.Error(ex.Message);
                loading = false;
                StateHasChanged();
            }
        }
    }
