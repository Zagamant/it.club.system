@page "/groups/add"
@using Microsoft.AspNetCore.Authorization
@using BlazorClient.Services.GroupManagement
@using BlazorClient.Services.AlertManagement
@using System.BLL.Models.GroupManagement;
@using BlazorClient.Models.Enums
@using GroupModel = BlazorClient.Models.Group.GroupModel

@attribute [Authorize]
@inject IAlertService _alertService
@inject IGroupService _groupService
@inject NavigationManager _navigationManager

<div class="white-bg-plate form">
    <h1>Добавить</h1>

    <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>

        <Divider DividerType="DividerType.TextContent" Text="О группе"/>

        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is5">Название</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is5">
                <TextEdit Placeholder="Си шарп ПН-СР" @bind-Text="@_model.Title"/>
            </FieldBody>
        </Field>
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is5">Количество учащихся</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is5">
                <NumericEdit Placeholder="10" @bind-Value="@_model.Capacity"/>
            </FieldBody>
        </Field>
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is5">Соцсеть группы</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is5">
                <TextEdit Placeholder="VK" @bind-Text="@_model.Messenger"/>
            </FieldBody>
        </Field>
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is5">Уроков в неделю</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is5">
                <NumericEdit Placeholder="Уроков в неделю" @bind-Value="@_model.LessonsPerWeek"/>
            </FieldBody>
        </Field>
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is5">Начало занятий</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is5">
                <DateEdit Placeholder="Начало занятий" @bind-Date="@_model.StartDate"/>
            </FieldBody>
        </Field>
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is5">Окончание занятий</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is5">
                <DateEdit Placeholder="Окончание занятий" @bind-Date="@_model.EndDate"/>
            </FieldBody>
        </Field>
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is5">Ссылка на конференцию</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is5">
                <TextEdit Role="TextRole.Url" Placeholder="Ссылка на конференцию" @bind-Text="@_model.OnlineConversationLink"/>
            </FieldBody>
        </Field>


        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is5">Статус</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is5">
                <Select TValue="string"
                        SelectedValueChanged="@(ctx => OnEnumValueChange(ctx))">
                    @foreach (Enum item in Enum.GetValues(typeof(GroupStatus)))
                    {
                        <SelectItem Value="@item.ToString()">@item.ToString()</SelectItem>
                    }
                </Select>
            </FieldBody>
        </Field>

        <Row Class="justify-content-space ">
            <Column ColumnSize="ColumnSize.Is12" Margin="new FluentMargin().Is2">
                <Button Size="Size.Large" Color="Color.Primary" Block="true" disabled="@loading">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Сохранить
                </Button>
            </Column>
            <Column ColumnSize="ColumnSize.Is12" Margin="new FluentMargin().Is0.FromTop.Is2">
                <Button To="users" Color="Color.Secondary" Block="true">Отменить</Button>
            </Column>
        </Row>
    </EditForm>

</div>


@code {

    private GroupModel _model = new();
    private bool loading;

    private async void OnValidSubmit()
    {
        loading = true;
        try
        {
            await _groupService.AddAsync(_model);
            _alertService.Success("Group added successfully", keepAfterRouteChange: true);
            _navigationManager.NavigateTo("users");
        }
        catch (Exception ex)
        {
            _alertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }


    private void OnEnumValueChange(string enumString)
    {
        Enum.TryParse(enumString, out GroupStatus status);
        _model.Status = status;
    }

}