@page "/groups/add"
@using Microsoft.AspNetCore.Authorization
@using BlazorClient.Services.GroupManagement
@using BlazorClient.Services.AlertManagement
@using System.BLL.Models.GroupManagement;
@attribute [Authorize]
@inject IAlertService AlertService
@inject IGroupService GroupService
@inject NavigationManager NavigationManager

<div class="Add-form">
    <h1>Add Group</h1>


    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-row">
            <div class="form-group col">
                <label>Title</label>
                <InputText @bind-Value="model.Title" class="form-control" />
                <ValidationMessage For="@(() => model.Title)" />
            </div>
            <div class="form-group col">
                <label>LessonsPerWeek</label>
                <InputNumber @bind-Value="model.LessonsPerWeek" class="form-control" />
            <ValidationMessage For="@(() => model.LessonsPerWeek)" />
            </div>

            <div class="form-group col">
                <label>OnlineConversationLink</label>
                <InputText @bind-Value="model.OnlineConversationLink" class="form-control" />
                <ValidationMessage For="@(() => model.OnlineConversationLink)" />
            </div>

            <div class="form-group col">
                <label>Messenger</label>
                <InputText @bind-Value="model.Messenger" class="form-control" />
                <ValidationMessage For="@(() => model.Messenger)" />
            </div>

        </div>
        <div class="form-row">
            <div class="form-group col">
                <label>StartDate</label>
                <InputDate @bind-Value="model.StartDate" class="form-control" />
            <ValidationMessage For="@(() => model.StartDate)" />
            </div>
            <div class="form-group col">
                <label>EndDate</label>
                <InputDate @bind-Value="model.EndDate" class="form-control" />
            <ValidationMessage For="@(() => model.EndDate)" />
            </div>

            <div class="form-group col">
                <label>Capacity</label>
                <InputNumber @bind-Value="model.Capacity" class="form-control" />
            <ValidationMessage For="@(() => model.Capacity)" />
            </div>

            <div class="form-group col">
                <label>Status</label>
                @*<select @bind-value="model.status" class="form-control" />*@
            <Select TValue="string">
                @foreach (var item in _groupStatus)
                {
                <SelectItem Value="@item">@item</SelectItem>
                }
            </Select>
                <ValidationMessage For="@(() => model.Status)" />
            </div>


        </div>
        <div class="form-group">
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Save
            </button>
            <NavLink href="users" class="btn btn-link">Cancel</NavLink>
        </div>
    </EditForm>
</div>




@code {

    private static readonly string[] _groupStatus =
        {
            "Recruitment",
        "PendingStart",
        "InProgress",
        "Canceled"

        };

    private GroupModel model = new GroupModel();
    private bool loading;

    private async void OnValidSubmit()
    {
        loading = true;
        try
        {
            await GroupService.AddAsync(model);
            AlertService.Success("Group added successfully", keepAfterRouteChange: true);
            NavigationManager.NavigateTo("users");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}
