@page "/users"
@using Microsoft.AspNetCore.Authorization
@using BlazorClient.Services.AccountManagement
@using System.BLL.Models.UserManagement
@attribute [Authorize]
@inject IAccountService AccountService

<h1>Users</h1>
<NavLink href="users/add" class="btn btn-sm btn-success mb-2">Add User</NavLink>
<table class="table table-striped">
    <DataGrid TItem="UserModel"
              Data="@users"
              TotalItems="@totalCount"
              Filterable="true"
              FilterMethod="DataGridFilterMethod.Contains">
        <DataGridColumns>
            <DataGridCommandColumn TItem="UserModel">
                <DeleteCommandTemplate>
                    <Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>
                </DeleteCommandTemplate>
            </DataGridCommandColumn>
            <DataGridColumn TItem="UserModel" Field="@nameof(UserModel.UserName)" Caption="Username"/>
            <DataGridColumn TItem="UserModel" Field="@nameof(UserModel.Name)" Caption="First Name"/>
            <DataGridColumn TItem="UserModel" Field="@nameof(UserModel.Surname)" Caption="Last Name"/>
            <DataGridColumn TItem="UserModel" Field="@nameof(UserModel.Email)" Caption="Email"/>
            
            <DataGridColumn TItem="UserModel" Field="@nameof( UserModel.Id)" Sortable="false" Filterable="false">
                <DisplayTemplate>
                    <Button Color="Color.Danger" Clicked="@(() => DeleteUser(context.Id))">
                        Delete
                    </Button>
                </DisplayTemplate>
            </DataGridColumn>
        </DataGridColumns>
    </DataGrid>
</table>

@code {
    private bool loading;
    private IList<UserModel> users;
    private bool IsDeleting;
    private int totalCount;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        users = (await AccountService.GetAll()).ToList();
        totalCount = users.Count;
        loading = false;
    }

    private async void DeleteUser(int id)
    {
        var user = users.First(x => x.Id == id);
        IsDeleting = true;
        await AccountService.Delete(id);
        users.Remove(user);
        StateHasChanged();
        IsDeleting = false;
    }

}